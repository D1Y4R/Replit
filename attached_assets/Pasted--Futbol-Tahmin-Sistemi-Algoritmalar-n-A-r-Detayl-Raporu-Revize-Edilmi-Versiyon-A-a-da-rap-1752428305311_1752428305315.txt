# Futbol Tahmin Sistemi: AlgoritmalarÄ±n AÅŸÄ±rÄ± DetaylÄ± Raporu (Revize EdilmiÅŸ Versiyon)

AÅŸaÄŸÄ±da, raporun xG ve xGA bÃ¶lÃ¼mÃ¼nÃ¼, son Ã¶nerime (favori takÄ±m xG uyuÅŸmazlÄ±ÄŸÄ± dÃ¼zeltmesi) ve yeni talebine (Elo hesaplamasÄ±nda son 21 maÃ§Ä± deÄŸil, son 120 gÃ¼ndeki maÃ§larÄ± kullan) gÃ¶re revize ettim. Revizyon, matematiksel prensibe ve kod snippet'ine entegre edildi: Favori dÃ¼zeltmesi, Elo farkÄ±na dayalÄ± threshold ile xG'yi otomatik artÄ±rÄ±r (eÄŸer favori ama xG dÃ¼ÅŸÃ¼kse). Elo, son 120 gÃ¼ndeki maÃ§ verileriyle hesaplanÄ±r (tarih filtrelemesi eklenerek). DiÄŸer bÃ¶lÃ¼mler (Poisson, Dixon-Coles vb.) aynÄ± kaldÄ±, Ã§Ã¼nkÃ¼ revizyon sadece xG/xGA ve Elo'yu etkiliyor. Raporun genel yapÄ±sÄ± korunmuÅŸtur.

---

## 1. xG ve xGA HesaplamasÄ± (Gol Beklentileri ve Gol Yeme Beklentileri) â€“ Revize EdilmiÅŸ
- **TanÄ±m:**  
  xG (Expected Goals), bir takÄ±mÄ±n beklenen gol atma sayÄ±sÄ±nÄ±; xGA (Expected Goals Against), beklenen gol yeme sayÄ±sÄ±nÄ± tahmin eder. Bu, diÄŸer tahminlerin temel input'udur (Î» Ã¼retir).

- **Matematiksel Ã‡alÄ±ÅŸma Prensibi (Revize):**  
  - **AÄŸÄ±rlÄ±klÄ± Ortalama:** Son 120 gÃ¼ndeki maÃ§ verileriyle hesaplanÄ±r (tarih filtrelemesiyle). AÄŸÄ±rlÄ±klar: Son maÃ§lara daha fazla Ã¶nem (decaying factor).  
    xG = âˆ‘ (gol_scored_i * weight_i) / âˆ‘ weight_i,  
    xGA = âˆ‘ (gol_conceded_i * weight_i) / âˆ‘ weight_i,  
    weight_i = linspace(0.2, 1.0, num_matches) (son maÃ§lara yÃ¼ksek aÄŸÄ±rlÄ±k, decay ile).
  - **Elo Entegrasyonu (Revize):** TakÄ±m gÃ¼cÃ¼nÃ¼ puanlar (baÅŸlangÄ±Ã§ 1500). Son 120 gÃ¼ndeki maÃ§lar filtrelenir. MaÃ§ sonrasÄ±:  
    Yeni_Elo = Eski_Elo + K * (GerÃ§ek_SonuÃ§ - Beklenen_SonuÃ§),  
    K=30,  
    Beklenen = 1 / (1 + 10^{(Elo_rakip - Elo_kendi)/400}),  
    GerÃ§ek=1 (kazanma), 0.5 (beraberlik), 0 (kaybetme).  
    Decay: Eski maÃ§lar 0.95^i ile aÄŸÄ±rlÄ±klandÄ±rÄ±lÄ±r (i: gÃ¼n bazlÄ± sÄ±ra).
  - **Ã‡aprazlama ve Favori DÃ¼zeltmesi (Revize):**  
    Î»_home = home_xG * away_xGA * 1.1 (ev avantajÄ±).  
    Favori dÃ¼zeltmesi: EÄŸer Elo_home > Elo_away (favori home) ve home_xG < away_xG ise, home_xG = min(home_xG + 0.3, away_xG * 1.2) (threshold ile aÅŸÄ±rÄ± artÄ±ÅŸÄ± Ã¶nle). Benzer ÅŸekilde xGA iÃ§in ters dÃ¼zeltme (dÃ¼ÅŸÃ¼k xGA'yÄ± koru).

- **Avantajlar:**  
  Veri sÄ±nÄ±rlÄ± olsa bile gerÃ§ekÃ§i (Elo ile baÄŸlamsal ayar); favori sorunu Ã§Ã¶zer (dÃ¼ÅŸÃ¼k xG'yi artÄ±rÄ±r).  
  Dezavantajlar: Veri gÃ¼rÃ¼ltÃ¼sÃ¼ (smoothing gerek); hesaplama basit.

- **Sistem Entegrasyonu:**  
  xG/xGA, Î»'larÄ± Ã¼retir ve hibrit matrise input olur. Popup'ta doÄŸrudan gÃ¶sterilir. DiÄŸer tahminler (Ã¶r. KG yok) dÃ¼ÅŸÃ¼k xGA'da artar.

- **Ã–rnek KullanÄ±m Senaryosu:**  
  Favori takÄ±m (yÃ¼ksek Elo, dÃ¼ÅŸÃ¼k xGA) vs. zayÄ±f rakip: xG yÃ¼ksek, xGA dÃ¼ÅŸÃ¼k â†’ Î»_home yÃ¼ksek, Î»_away dÃ¼ÅŸÃ¼k â†’ KG yok artar.

- **Kod Snippet Ã–rneÄŸi (Revize, Son 120 GÃ¼n Filtrelemesi Entegre):**
  ```python
  import numpy as np
  from datetime import datetime, timedelta

  def filter_last_120_days(matches):
      today = datetime.now()
      cutoff = today - timedelta(days=120)
      return [m for m in matches if datetime.strptime(m['date'], '%Y-%m-%d') >= cutoff]  # MaÃ§ tarihini filtrele (m['date'] varsayÄ±mÄ±)

  def calculate_elo(matches, initial_elo=1500, K=30):
      filtered_matches = filter_last_120_days(matches)
      elo = initial_elo
      for i, m in enumerate(filtered_matches[::-1]):  # Son maÃ§tan baÅŸla
          opponent_elo = 1500  # GerÃ§ekte rakip Elo hesapla
          expected = 1 / (1 + 10 ** ((opponent_elo - elo) / 400))
          actual = 1 if m['goals_scored'] > m['goals_conceded'] else 0.5 if m['goals_scored'] == m['goals_conceded'] else 0
          decay = 0.95 ** i
          elo += K * (actual - expected) * decay
      return elo

  def calculate_xg(team_matches, opponent_matches, home=True):
      filtered_team = filter_last_120_days(team_matches)
      filtered_opponent = filter_last_120_days(opponent_matches)
      weights = np.linspace(0.2, 1.0, len(filtered_team))
      xg = np.average([m['goals_scored'] for m in filtered_team], weights=weights)
      opponent_xg = np.average([m['goals_scored'] for m in filtered_opponent], weights=weights)
      
      team_elo = calculate_elo(filtered_team)
      opponent_elo = calculate_elo(filtered_opponent)
      
      elo_factor = (team_elo / opponent_elo) if opponent_elo != 0 else 1
      if home: elo_factor *= 1.1
      xg *= elo_factor
      
      # Revize Favori DÃ¼zeltmesi
      if team_elo > opponent_elo and xg < opponent_xg:
          xg = min(xg + 0.3, opponent_xg * 1.2)  # Threshold: Rakip xG'nin 1.2 katÄ±nÄ± aÅŸma
      
      return xg

  def calculate_xga(team_matches, opponent_matches, home=True):
      filtered_team = filter_last_120_days(team_matches)
      filtered_opponent = filter_last_120_days(opponent_matches)
      weights = np.linspace(0.2, 1.0, len(filtered_team))
      xga = np.average([m['goals_conceded'] for m in filtered_team], weights=weights)
      opponent_xga = np.average([m['goals_conceded'] for m in filtered_opponent], weights=weights)
      
      team_elo = calculate_elo(filtered_team)
      opponent_elo = calculate_elo(filtered_opponent)
      
      elo_factor = (opponent_elo / team_elo) if team_elo != 0 else 1
      if not home: elo_factor *= 1.1
      xga *= elo_factor
      
      # Revize Favori DÃ¼zeltmesi (xGA iÃ§in ters: Favori dÃ¼ÅŸÃ¼k xGA'yÄ± korur)
      if team_elo > opponent_elo and xga > opponent_xga * 1.2:
          xga = max(xga - 0.3, opponent_xga * 0.8)  # Threshold: Rakip xGA'nÄ±n 0.8 katÄ±ndan azalma
      
      return xga

  def calculate_cross_lambda(home_matches, away_matches):
      home_xg = calculate_xg(home_matches, away_matches, home=True)
      away_xg = calculate_xg(away_matches, home_matches, home=False)
      home_xga = calculate_xga(home_matches, away_matches, home=True)
      away_xga = calculate_xga(away_matches, home_matches, home=False)
      
      lambda_home = home_xg * away_xga * 1.1
      lambda_away = away_xg * home_xga * 0.9
      
      # Ek Î» DÃ¼zeltmesi
      elo_home = calculate_elo(home_matches)
      elo_away = calculate_elo(away_matches)
      if elo_home > elo_away and lambda_home < lambda_away:
          lambda_home += (home_xga - away_xga) * 0.2
      
      return lambda_home, lambda_away
  ```

Bu revizyon, Elo'yu son 120 gÃ¼ndeki maÃ§lara dayandÄ±rÄ±r â€“ tarih filtrelemesiyle (datetime kÃ¼tÃ¼phanesi kullanÄ±larak) veri seti dinamik sÄ±nÄ±rlanÄ±r. Raporun diÄŸer bÃ¶lÃ¼mleri etkilenmedi. EÄŸer tam raporu veya kodu test etmek istersen, belirt! ðŸ˜Š